// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/order.proto

package order

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderEntityMultiError, or
// nil if none found.
func (m *OrderEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for RecipientId

	// no validation rules for StorageUntil

	if len(errors) > 0 {
		return OrderEntityMultiError(errors)
	}

	return nil
}

// OrderEntityMultiError is an error wrapping multiple validation errors
// returned by OrderEntity.ValidateAll() if the designated constraints aren't met.
type OrderEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderEntityMultiError) AllErrors() []error { return m }

// OrderEntityValidationError is the validation error returned by
// OrderEntity.Validate if the designated constraints aren't met.
type OrderEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderEntityValidationError) ErrorName() string { return "OrderEntityValidationError" }

// Error satisfies the builtin error interface
func (e OrderEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderEntityValidationError{}

// Validate checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderRequestMultiError, or nil if none found.
func (m *AcceptOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRecipientId() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "RecipientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStorageUntil() == nil {
		err := AcceptOrderRequestValidationError{
			field:  "StorageUntil",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetStorageUntil(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = AcceptOrderRequestValidationError{
				field:  "StorageUntil",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := AcceptOrderRequestValidationError{
					field:  "StorageUntil",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	// no validation rules for Weight

	// no validation rules for Cost

	if m.PackageType != nil {

		if m.GetPackageType() != "" {

			if !_AcceptOrderRequest_PackageType_Pattern.MatchString(m.GetPackageType()) {
				err := AcceptOrderRequestValidationError{
					field:  "PackageType",
					reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]*$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return AcceptOrderRequestMultiError(errors)
	}

	return nil
}

// AcceptOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AcceptOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AcceptOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderRequestMultiError) AllErrors() []error { return m }

// AcceptOrderRequestValidationError is the validation error returned by
// AcceptOrderRequest.Validate if the designated constraints aren't met.
type AcceptOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderRequestValidationError) ErrorName() string {
	return "AcceptOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderRequestValidationError{}

var _AcceptOrderRequest_PackageType_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]*$")

// Validate checks the field values on AcceptOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderResponseMultiError, or nil if none found.
func (m *AcceptOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for OrderId

	if len(errors) > 0 {
		return AcceptOrderResponseMultiError(errors)
	}

	return nil
}

// AcceptOrderResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderResponseMultiError) AllErrors() []error { return m }

// AcceptOrderResponseValidationError is the validation error returned by
// AcceptOrderResponse.Validate if the designated constraints aren't met.
type AcceptOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderResponseValidationError) ErrorName() string {
	return "AcceptOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderResponseValidationError{}

// Validate checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderRequestMultiError, or nil if none found.
func (m *ReturnOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnOrderRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderRequestMultiError) AllErrors() []error { return m }

// ReturnOrderRequestValidationError is the validation error returned by
// ReturnOrderRequest.Validate if the designated constraints aren't met.
type ReturnOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderRequestValidationError) ErrorName() string {
	return "ReturnOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderRequestValidationError{}

// Validate checks the field values on ReturnOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderResponseMultiError, or nil if none found.
func (m *ReturnOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for OrderId

	if len(errors) > 0 {
		return ReturnOrderResponseMultiError(errors)
	}

	return nil
}

// ReturnOrderResponseMultiError is an error wrapping multiple validation
// errors returned by ReturnOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type ReturnOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderResponseMultiError) AllErrors() []error { return m }

// ReturnOrderResponseValidationError is the validation error returned by
// ReturnOrderResponse.Validate if the designated constraints aren't met.
type ReturnOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderResponseValidationError) ErrorName() string {
	return "ReturnOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderResponseValidationError{}

// Validate checks the field values on IssueOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IssueOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueOrderRequestMultiError, or nil if none found.
func (m *IssueOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrderIds()) < 1 {
		err := IssueOrderRequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_IssueOrderRequest_OrderIds_Unique := make(map[int64]struct{}, len(m.GetOrderIds()))

	for idx, item := range m.GetOrderIds() {
		_, _ = idx, item

		if _, exists := _IssueOrderRequest_OrderIds_Unique[item]; exists {
			err := IssueOrderRequestValidationError{
				field:  fmt.Sprintf("OrderIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_IssueOrderRequest_OrderIds_Unique[item] = struct{}{}
		}

		// no validation rules for OrderIds[idx]
	}

	if len(errors) > 0 {
		return IssueOrderRequestMultiError(errors)
	}

	return nil
}

// IssueOrderRequestMultiError is an error wrapping multiple validation errors
// returned by IssueOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type IssueOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueOrderRequestMultiError) AllErrors() []error { return m }

// IssueOrderRequestValidationError is the validation error returned by
// IssueOrderRequest.Validate if the designated constraints aren't met.
type IssueOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueOrderRequestValidationError) ErrorName() string {
	return "IssueOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueOrderRequestValidationError{}

// Validate checks the field values on IssueOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueOrderResponseMultiError, or nil if none found.
func (m *IssueOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for OrderId

	if len(errors) > 0 {
		return IssueOrderResponseMultiError(errors)
	}

	return nil
}

// IssueOrderResponseMultiError is an error wrapping multiple validation errors
// returned by IssueOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type IssueOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueOrderResponseMultiError) AllErrors() []error { return m }

// IssueOrderResponseValidationError is the validation error returned by
// IssueOrderResponse.Validate if the designated constraints aren't met.
type IssueOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueOrderResponseValidationError) ErrorName() string {
	return "IssueOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueOrderResponseValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRecipientId() <= 0 {
		err := ListOrdersRequestValidationError{
			field:  "RecipientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponseMultiError, or nil if none found.
func (m *ListOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersResponseMultiError(errors)
	}

	return nil
}

// ListOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponseMultiError) AllErrors() []error { return m }

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnRequestMultiError, or nil if none found.
func (m *AcceptReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := AcceptReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRecipientId() <= 0 {
		err := AcceptReturnRequestValidationError{
			field:  "RecipientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptReturnRequestMultiError(errors)
	}

	return nil
}

// AcceptReturnRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnRequestMultiError) AllErrors() []error { return m }

// AcceptReturnRequestValidationError is the validation error returned by
// AcceptReturnRequest.Validate if the designated constraints aren't met.
type AcceptReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnRequestValidationError) ErrorName() string {
	return "AcceptReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnRequestValidationError{}

// Validate checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnResponseMultiError, or nil if none found.
func (m *AcceptReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for OrderId

	if len(errors) > 0 {
		return AcceptReturnResponseMultiError(errors)
	}

	return nil
}

// AcceptReturnResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnResponseMultiError) AllErrors() []error { return m }

// AcceptReturnResponseValidationError is the validation error returned by
// AcceptReturnResponse.Validate if the designated constraints aren't met.
type AcceptReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnResponseValidationError) ErrorName() string {
	return "AcceptReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnResponseValidationError{}

// Validate checks the field values on ReturnListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReturnListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnListRequestMultiError, or nil if none found.
func (m *ReturnListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ReturnListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return ReturnListRequestMultiError(errors)
	}

	return nil
}

// ReturnListRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnListRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnListRequestMultiError) AllErrors() []error { return m }

// ReturnListRequestValidationError is the validation error returned by
// ReturnListRequest.Validate if the designated constraints aren't met.
type ReturnListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnListRequestValidationError) ErrorName() string {
	return "ReturnListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnListRequestValidationError{}

// Validate checks the field values on ReturnListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnListResponseMultiError, or nil if none found.
func (m *ReturnListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReturnListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReturnListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReturnListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReturnListResponseMultiError(errors)
	}

	return nil
}

// ReturnListResponseMultiError is an error wrapping multiple validation errors
// returned by ReturnListResponse.ValidateAll() if the designated constraints
// aren't met.
type ReturnListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnListResponseMultiError) AllErrors() []error { return m }

// ReturnListResponseValidationError is the validation error returned by
// ReturnListResponse.Validate if the designated constraints aren't met.
type ReturnListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnListResponseValidationError) ErrorName() string {
	return "ReturnListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnListResponseValidationError{}
