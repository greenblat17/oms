// Code generated by MockGen. DO NOT EDIT.
// Source: ./module.go

// Package mock_module is a generated GoMock package.
package mock_module

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/a_zhuravlev_9785/homework/internal/domain"
	transactor "gitlab.ozon.dev/a_zhuravlev_9785/homework/internal/storage/transactor"
)

// MockOrderSaver is a mock of OrderSaver interface.
type MockOrderSaver struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSaverMockRecorder
}

// MockOrderSaverMockRecorder is the mock recorder for MockOrderSaver.
type MockOrderSaverMockRecorder struct {
	mock *MockOrderSaver
}

// NewMockOrderSaver creates a new mock instance.
func NewMockOrderSaver(ctrl *gomock.Controller) *MockOrderSaver {
	mock := &MockOrderSaver{ctrl: ctrl}
	mock.recorder = &MockOrderSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSaver) EXPECT() *MockOrderSaverMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderSaver) CreateOrder(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderSaverMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderSaver)(nil).CreateOrder), ctx, order)
}

// UpdateOrder mocks base method.
func (m *MockOrderSaver) UpdateOrder(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderSaverMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderSaver)(nil).UpdateOrder), ctx, order)
}

// MockOrderDeleter is a mock of OrderDeleter interface.
type MockOrderDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDeleterMockRecorder
}

// MockOrderDeleterMockRecorder is the mock recorder for MockOrderDeleter.
type MockOrderDeleterMockRecorder struct {
	mock *MockOrderDeleter
}

// NewMockOrderDeleter creates a new mock instance.
func NewMockOrderDeleter(ctrl *gomock.Controller) *MockOrderDeleter {
	mock := &MockOrderDeleter{ctrl: ctrl}
	mock.recorder = &MockOrderDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDeleter) EXPECT() *MockOrderDeleterMockRecorder {
	return m.recorder
}

// DeleteOrder mocks base method.
func (m *MockOrderDeleter) DeleteOrder(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderDeleterMockRecorder) DeleteOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderDeleter)(nil).DeleteOrder), ctx, orderID)
}

// DeleteRecipientOrders mocks base method.
func (m *MockOrderDeleter) DeleteRecipientOrders(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipientOrders", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipientOrders indicates an expected call of DeleteRecipientOrders.
func (mr *MockOrderDeleterMockRecorder) DeleteRecipientOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipientOrders", reflect.TypeOf((*MockOrderDeleter)(nil).DeleteRecipientOrders), ctx)
}

// MockOrderProvider is a mock of OrderProvider interface.
type MockOrderProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProviderMockRecorder
}

// MockOrderProviderMockRecorder is the mock recorder for MockOrderProvider.
type MockOrderProviderMockRecorder struct {
	mock *MockOrderProvider
}

// NewMockOrderProvider creates a new mock instance.
func NewMockOrderProvider(ctrl *gomock.Controller) *MockOrderProvider {
	mock := &MockOrderProvider{ctrl: ctrl}
	mock.recorder = &MockOrderProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProvider) EXPECT() *MockOrderProviderMockRecorder {
	return m.recorder
}

// FindOrderByID mocks base method.
func (m *MockOrderProvider) FindOrderByID(ctx context.Context, id int64) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByID", ctx, id)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByID indicates an expected call of FindOrderByID.
func (mr *MockOrderProviderMockRecorder) FindOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByID", reflect.TypeOf((*MockOrderProvider)(nil).FindOrderByID), ctx, id)
}

// FindOrderByIDs mocks base method.
func (m *MockOrderProvider) FindOrderByIDs(ctx context.Context, ids []int64) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByIDs", ctx, ids)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByIDs indicates an expected call of FindOrderByIDs.
func (mr *MockOrderProviderMockRecorder) FindOrderByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByIDs", reflect.TypeOf((*MockOrderProvider)(nil).FindOrderByIDs), ctx, ids)
}

// FindOrdersByRecipientID mocks base method.
func (m *MockOrderProvider) FindOrdersByRecipientID(ctx context.Context, recipientID int64) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByRecipientID", ctx, recipientID)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByRecipientID indicates an expected call of FindOrdersByRecipientID.
func (mr *MockOrderProviderMockRecorder) FindOrdersByRecipientID(ctx, recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByRecipientID", reflect.TypeOf((*MockOrderProvider)(nil).FindOrdersByRecipientID), ctx, recipientID)
}

// FindReturnedOrdersWithPagination mocks base method.
func (m *MockOrderProvider) FindReturnedOrdersWithPagination(ctx context.Context, limit, offset int32) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReturnedOrdersWithPagination", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReturnedOrdersWithPagination indicates an expected call of FindReturnedOrdersWithPagination.
func (mr *MockOrderProviderMockRecorder) FindReturnedOrdersWithPagination(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReturnedOrdersWithPagination", reflect.TypeOf((*MockOrderProvider)(nil).FindReturnedOrdersWithPagination), ctx, limit, offset)
}

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// RunTransactionalQuery mocks base method.
func (m *MockTransactionManager) RunTransactionalQuery(ctx context.Context, isoLevel transactor.TxIsoLevel, accessMode transactor.TxAccessMode, queryFunc transactor.QueryFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransactionalQuery", ctx, isoLevel, accessMode, queryFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransactionalQuery indicates an expected call of RunTransactionalQuery.
func (mr *MockTransactionManagerMockRecorder) RunTransactionalQuery(ctx, isoLevel, accessMode, queryFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransactionalQuery", reflect.TypeOf((*MockTransactionManager)(nil).RunTransactionalQuery), ctx, isoLevel, accessMode, queryFunc)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key int64) (*domain.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key int64, value *domain.Order, now time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, key, value, now)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, now)
}
